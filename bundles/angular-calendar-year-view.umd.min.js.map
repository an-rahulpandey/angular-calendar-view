{"version":3,"sources":["ng://angular-calendar-year-view/lib/angular-calendar-year-view.component.ts","ng://angular-calendar-year-view/lib/angular-calendar-year-view.module.ts"],"names":["clone","cloneDeep","AngularCalendarYearViewComponent","sanitizer","this","themecolor","events","viewDate","Date","eventClicked","EventEmitter","actionClicked","loader","days","daydetails","year","getFullYear","calendar","spinner","Object","defineProperty","prototype","bypassSecurityTrustStyle","ngOnInit","initCalendar","ngOnChanges","date","index","push","generateCalendar","self","setTimeout","month","monthList","nbweeks","getNbWeeks","dayone","getDay","nbdaysMonth","getDate","lastdayindex","lastday","day","today","toDateString","indexweek","indexday","istoday","colorsEvents","getnbevents","colors","color","nb","getTodayEvents","length","d1","element","this_1","start","self_1","secondary","toString","eventClickedFn","event","emit","refresh","actionClickedFn","action","Component","args","selector","template","DomSanitizer","HostBinding","Input","Output","AngularCalendarYearViewModule","forRoot","ngModule","providers","PopoverModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, HostBinding } from \"@angular/core\";\nimport * as cloneDeep from \"lodash/cloneDeep\";\nimport { DomSanitizer } from '@angular/platform-browser';\nconst clone: cloneDeep = (<any>cloneDeep).default || cloneDeep\n@Component({\n  selector: 'angular-calendar-year-view',\n  templateUrl: './angular-calendar-year-view.component.html',\n  styleUrls: ['./angular-calendar-year-view.component.scss']\n})\nexport class AngularCalendarYearViewComponent implements OnInit {\n  @HostBinding('style')\n  get style() {\n    return this.sanitizer.bypassSecurityTrustStyle(\n      `--themecolor: ${this.themecolor};`\n    );\n  }\n  @Input()\n  themecolor:any='#ff0000'\n  @Input()\n  events = [];\n\n  @Input()\n  viewDate: Date = new Date();\n\n  @Output()\n  eventClicked = new EventEmitter<any>();\n  \n  @Output()\n  actionClicked = new EventEmitter<any>();\n\n  loader: any = false;\n  days: any = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\n  dayindex: any;\n  daydetails: any = {};\n  year: any = new Date().getFullYear();\n  calendar: any = [];\n  spinner: any = true;\n  constructor(              public sanitizer:DomSanitizer,\n\n  ) { }\n  ngOnInit() {\n    this.initCalendar(this.viewDate);\n  }\n  ngOnChanges() {\n    this.initCalendar(this.viewDate);\n  }\n  initCalendar(date) {\n    this.year = date.getFullYear();\n    this.calendar = [];\n    this.spinner = true;\n    for (let index = 0; index < 12; index++) {\n      this.calendar.push({\n        date: new Date(this.year, index + 1, 0),\n        days: this.generateCalendar(index + 1, this.year)\n      });\n    }\n    let self = this;\n    setTimeout(() => {\n      self.spinner = false;\n    }, 2000);\n  }\n  generateCalendar(month, year) {\n    let monthList = [];\n    let nbweeks = this.getNbWeeks(month, year);\n    let dayone = new Date(year, month - 1, 1).getDay();\n    let nbdaysMonth = new Date(year, month, 0).getDate();\n    let lastdayindex = new Date(year, month - 1, nbdaysMonth).getDay();\n    let lastday = 7;\n    let day = 1;\n    let today = new Date().toDateString();\n\n    for (let indexweek = 0; indexweek < nbweeks; indexweek++) {\n      monthList[indexweek] = [];\n      if (nbweeks == indexweek + 1) {\n        lastday = lastdayindex + 1;\n      }\n      if (indexweek > 0) {\n        dayone = 0;\n      }\n      for (let indexday = dayone; indexday < lastday; indexday++) {\n        let d1 = new Date(year, month - 1, day).toDateString();\n        let istoday = d1 == today;\n        let colorsEvents = this.getnbevents(day, month - 1)\n        monthList[indexweek][indexday] = {\n          day: day,\n          istoday: istoday,\n          colors: colorsEvents.color,\n          events: [],\n          nb: colorsEvents.nb\n        };\n        day++;\n      }\n    }\n\n    return monthList;\n  }\n  getNbWeeks(month, year) {\n    let dayone = new Date(year, month - 1, 1).getDay();\n    let nbdaysMonth = new Date(year, month, 0).getDate();\n    let lastday = new Date(year, month - 1, nbdaysMonth).getDay();\n    return (nbdaysMonth + dayone + (6 - lastday)) / 7;\n  }\n  getTodayEvents(day, month) {\n    this.daydetails = {}\n\n    if (this.events.length > 0) {\n      this.loader = true;\n      this.daydetails = clone(day);\n      let d1 = new Date(this.year, month, day.day).toDateString();\n\n      for (let index = 0; index < this.events.length; index++) {\n        const element = this.events[index];\n        let d2 = element.start.toDateString();\n        if (d2 == d1) {\n          this.daydetails.events.push(element);\n        }\n        if (index == this.events.length - 1) {\n          let self = this;\n          setTimeout(() => {\n            self.loader = false;\n          }, 1000);\n        }\n\n      }\n    }\n  }\n  getnbevents(day, month) {\n    let nb = 0;\n    let colors = []\n    if (this.events.length > 0) {\n      let d1 = new Date(this.year, month, day).toDateString();\n      for (let index = 0; index < this.events.length; index++) {\n        const element = this.events[index];\n        let d2 = element.start.toDateString();\n        if (d2 == d1) {\n          nb++;\n          colors.push(element.color.secondary)\n        }\n      }\n      return ({ nb: nb, color: colors.toString() })\n    } else {\n      return { color: \"\", nb: 0 }\n    }\n  }\n  eventClickedFn(event) {\n    this.eventClicked.emit(event);\n  }\n  refresh(date) {\n    this.initCalendar(date);\n  }\n  actionClickedFn(action,event?){\n       this.actionClicked.emit({action:action,event:event})\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AngularCalendarYearViewComponent } from './angular-calendar-year-view.component';\nimport { PopoverModule } from 'ngx-bootstrap/popover'\nimport { CommonModule } from '@angular/common';\n\n\n@NgModule({\n  declarations: [\n    AngularCalendarYearViewComponent\n  ],\n  imports: [\n    CommonModule,\n    PopoverModule\n  ],\n  exports: [\n    AngularCalendarYearViewComponent\n  ]\n})\nexport class AngularCalendarYearViewModule { \n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AngularCalendarYearViewModule,\n      providers: [\n        PopoverModule.forRoot().providers\n      ]\n    }\n  }\n}\n"]}